#include <Wire.h>
#include <MPU6050.h>
#include <WiFi.h>
#include <ThingSpeak.h>
#include <HTTPClient.h>
// WiFi credentials
const char* ssid = "ssid";
const char* password = "password";

// ThingSpeak server details and API key
unsigned long channelId = xxxxxxxxx;
const char* apiKey = "xxxxxxxxxxxxxxx";
//const char* server = "api.thingspeak.com";
const char* serverUrl = "https://api.thingspeak.com";

// MPU6050 sensor
MPU6050 mpu;
float lastAz, lastGy;

// Exercise counts
int situpCount = 0;
int pushupCount = 0;
int armCircleCount = 0;

void setup() {
  Serial.begin(9600);
  Wire.begin();
  mpu.initialize();

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi!");
WiFiClient client;
//ThingSpeak.begin(client);

  ThingSpeak.begin(client); // Initialize ThingSpeak library
}

void loop() {
  // Read sensor data
  int16_t ax, ay, az, gx, gy, gz;
  mpu.getMotion6(&ax, &ay, &az, &gx, &gy, &gz);

  // Check for sit-up (acceleration above threshold)
  if (abs(az - lastAz) > 2000) {
    if (detectSitup(ax, ay)) {
      situpCount++;
      Serial.println("Sit-up detected!");
    }
  }

  // Check for push-up (shoulder movement)
  if (abs(gy - lastGy) > 2000) {
    if (detectPushup(ay, az)) {
      pushupCount++;
      Serial.println("Push-up detected!");
    }
  }

  // Check for arm circle (angular speed above threshold)
  if (abs(gy - lastGy) > 500) {
    if (detectArmCircle(gx, gy, gz)) {
      armCircleCount++;
      Serial.println("Arm circle detected!");
    }
  }

  // Update previous values
  lastAz = az;
  lastGy = gy;

  // Send data to ThingSpeak every 10 seconds
  if (millis() % 1000 == 0) {
    sendDataToThingSpeak();
  }

  // Print data to serial monitor
  Serial.print("Sit-ups: ");
  Serial.print(situpCount);
  Serial.print(", Push-ups: ");
  Serial.print(pushupCount);
  Serial.print(", Arm circles: ");
  Serial.println(armCircleCount);
}


bool detectSitup(float ax, float ay) {
  // Threshold for acceleration values
  const int situpThreshold = 4000;

  // Simple neural network to detect sit-ups
  float output = 0.2*ax + 0.3*ay - 1000;
  
  // Return true only if output is greater than 0 and acceleration values exceed the threshold
  return output > 0 && abs(ax) > situpThreshold && abs(ay) > situpThreshold;
}

bool detectPushup(float ay, float az) {
  // Threshold for acceleration values
  const int pushupThreshold = 2000;

  // Simple neural network to detect push-ups
  float output = -0.3*ay - 0.2*az + 1000;

  // Return true only if output is greater than 0 and acceleration values exceed the threshold
  return output > 0 && abs(ay) > pushupThreshold && abs(az) > pushupThreshold;
}
bool detectArmCircle(float gx, float gy, float gz) {
  static float avgGy = 0;
  static int count = 0;
  
  // Calculate average angular velocity over 5 seconds
  if (count < 5000/20) { // assuming 20ms loop delay
    avgGy += gy;
    count++;
  } else {
    avgGy /= count;
    float threshold = 2.0 * avgGy;
    float output = 0.1*gx + 0.2*gy + 0.3*gz - threshold;
    if (output > 0) {
      return true;
    }
    // reset values for next arm circle exercise
    avgGy = 0;
    count = 0;
  }
  return false;
}
void sendDataToThingSpeak() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("WiFi not connected");
    return;
  }

  // create an HTTPClient object
  HTTPClient http;

  // set the ThingSpeak server URL and API key
  String url = String(serverUrl) + "/update?api_key=" + String(apiKey) + "&field1=" + String(situpCount) + "&field2=" + String(pushupCount) + "&field3=" + String(armCircleCount);
  http.begin(url);

  // make the request to ThingSpeak
  int httpCode = http.GET();
  String payload = http.getString();

  // print the response from ThingSpeak
  Serial.print("HTTP response code: ");
  Serial.println(httpCode);
  Serial.print("Payload: ");
  Serial.println(payload);

  // close the connection
  http.end();
}


